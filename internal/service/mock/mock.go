// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "ScriptService/internal/model"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CancelCommand mocks base method.
func (m *MockCommand) CancelCommand(contextMap *sync.Map, cmdId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCommand", contextMap, cmdId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelCommand indicates an expected call of CancelCommand.
func (mr *MockCommandMockRecorder) CancelCommand(contextMap, cmdId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCommand", reflect.TypeOf((*MockCommand)(nil).CancelCommand), contextMap, cmdId)
}

// CreateCommand mocks base method.
func (m *MockCommand) CreateCommand(cmd model.Command) (model.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", cmd)
	ret0, _ := ret[0].(model.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockCommandMockRecorder) CreateCommand(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockCommand)(nil).CreateCommand), cmd)
}

// ExecuteCommand mocks base method.
func (m *MockCommand) ExecuteCommand(contextCommand model.ContextCommand, cmd model.Command) (model.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", contextCommand, cmd)
	ret0, _ := ret[0].(model.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockCommandMockRecorder) ExecuteCommand(contextCommand, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockCommand)(nil).ExecuteCommand), contextCommand, cmd)
}

// GetAllCommands mocks base method.
func (m *MockCommand) GetAllCommands() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommands")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommands indicates an expected call of GetAllCommands.
func (mr *MockCommandMockRecorder) GetAllCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommands", reflect.TypeOf((*MockCommand)(nil).GetAllCommands))
}

// GetCommand mocks base method.
func (m *MockCommand) GetCommand(cmdId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", cmdId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockCommandMockRecorder) GetCommand(cmdId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockCommand)(nil).GetCommand), cmdId)
}
